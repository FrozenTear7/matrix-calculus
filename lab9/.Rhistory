setwd("C:/Projects/Math/matrix-calculus/lab9")
install.packages("ISLR")
library(ISLR)
cor(Smarket[-9])
plot(Volume)
library(ISLR)
attach(Smarket)
cor(Smarket[-9])
plot(Volume)
head(Smarket)
fit.logistic <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = binomial, data = Smarket)
summary(fit.logistic)
probs.logistic <- predict(fit.logistic, type = "response")
head(probs.logistic)
probs.logistic <- predict(fit.logistic, type = "response")
head(probs.logistic)
contrasts(Direction)
pred.logistic <- ifelse(probs.logistic > 0.5, "Up", "Down")
conf.logistic <- table(pred.logistic, Direction)
conf.logistic
(conf.logistic[1, 2] + conf.logistic[2, 1]) / sum(conf.logistic)
mean(pred.logistic != Direction)
train <- Year < 2005
Smarket.test <- Smarket[!train,]
Direction.test <- Direction[!train]
fit.logistic <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = binomial, data = Smarket, subset = train)
summary(fit.logistic)
probs.logistic <- predict(fit.logistic, Smarket.test, type = "response")
pred.logistic <- ifelse(probs.logistic > 0.5, "Up", "Down")
table(pred.logistic, Direction.test)
train <- Year < 2005
Smarket.test <- Smarket[!train,]
Direction.test <- Direction[!train]
fit.logistic <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = binomial, data = Smarket, subset = train)
summary(fit.logistic)
probs.logistic <- predict(fit.logistic, Smarket.test, type = "response")
pred.logistic <- ifelse(probs.logistic > 0.5, "Up", "Down")
table(pred.logistic, Direction.test)
(conf.logistic[1, 2] + conf.logistic[2, 1]) / sum(conf.logistic)
mean(pred.logistic != Direction)
train <- Year < 2005
Smarket.test <- Smarket[!train,]
Direction.test <- Direction[!train]
fit.logistic <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = binomial, data = Smarket, subset = train)
summary(fit.logistic)
probs.logistic <- predict(fit.logistic, Smarket.test, type = "response")
pred.logistic <- ifelse(probs.logistic > 0.5, "Up", "Down")
table(pred.logistic, Direction.test)
(conf.logistic[1, 2] + conf.logistic[2, 1]) / sum(conf.logistic)
train <- Year < 2005
Smarket.test <- Smarket[!train,]
Direction.test <- Direction[!train]
fit.logistic <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = binomial, data = Smarket, subset = train)
summary(fit.logistic)
probs.logistic <- predict(fit.logistic, Smarket.test, type = "response")
pred.logistic <- ifelse(probs.logistic > 0.5, "Up", "Down")
table(pred.logistic, Direction.test)
(conf.logistic[1, 2] + conf.logistic[2, 1]) / sum(conf.logistic)
mean(pred.logistic != Direction)
train <- Year < 2005
Smarket.test <- Smarket[!train,]
Direction.test <- Direction[!train]
fit.logistic <- glm(Direction ~ Lag1 + Lag2, family = binomial,
data = Smarket, subset = train)
summary(fit.logistic)
probs.logistic <- predict(fit.logistic, Smarket.test, type = "response")
pred.logistic <- ifelse(probs.logistic > 0.5, "Up", "Down")
table(pred.logistic, Direction.test)
mean(Direction.test != "Up")
fit.lda <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
fit.lda
pred.lda <- predict(fit.lda, Smarket.test)
table(pred.lda$class, Direction.test)
max(pred.lda$posterior[, 2])
library(MASS)
fit.lda <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
fit.lda
pred.lda <- predict(fit.lda, Smarket.test)
table(pred.lda$class, Direction.test)
max(pred.lda$posterior[, 2])
fit.lda <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
fit.lda
pred.lda <- predict(fit.lda, Smarket.test)
table(pred.lda$class, Direction.test)
max(pred.lda$posterior[, 2])
max(pred.lda$posterior[, 1])
fit.qda <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
fit.qda
pred.qda <- predict(fit.qda, Smarket.test)
table(pred.qda$class, Direction.test)
fit.qda <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
fit.qda
pred.qda <- predict(fit.qda, Smarket.test)
table(pred.qda$class, Direction.test)
max(pred.qda$posterior[, 2])
max(pred.qda$posterior[, 1])
fit.qda <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
fit.qda
pred.qda <- predict(fit.qda, Smarket.test)
table(pred.qda$class, Direction.test)
max(pred.qda$posterior[, 2])
max(pred.qda$posterior[, 1])
fit.qda <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
fit.qda
pred.qda <- predict(fit.qda, Smarket.test)
table(pred.qda$class, Direction.test)
b = table(pred.qda$class, Direction.test)
(b[1, 2] + b[2, 1]) / sum(b)
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2")]
Direction.train <- Direction[train]
pred.knn.1 <- knn(train.set, test.set, Direction.train, k = 1)
table(pred.knn.1, Direction.test)
mean(pred.knn.1 != Direction.test)
library(class)
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2")]
Direction.train <- Direction[train]
pred.knn.1 <- knn(train.set, test.set, Direction.train, k = 1)
table(pred.knn.1, Direction.test)
mean(pred.knn.1 != Direction.test)
indices = Year == 2005
Smarket.year2005 = Smarket[indices]
observation = Smarket.year2005[6,]
indices = Year == 2005
Smarket.year2005 = Smarket[indices]
observation = Smarket.year2005[6,]
indices = Year == 2005
Smarket.year2005 = Smarket[indices]
observation = Smarket.year2005[,6]
indices = Year == 2005
Smarket.year2005 = Smarket[indices,]
observation = Smarket.year2005[6,]
indices = Year == 2005
Smarket.year2005 = Smarket[indices,]
observation = Smarket.year2005[6,]
observation
year2005index = Year == 2005
Smarket.year2005 = Smarket[year2005index,]
observation = Smarket.year2005[6,]
observation
y2005index = Year == 2005
Smarket.y2005 = Smarket[y2005index,]
observation6 = Smarket.y2005[6,]
observation6
View(fit.logistic)
# Zad 1
y2005index = Year == 2005
Smarket.y2005 = Smarket[y2005index,]
observation6 = Smarket.y2005[6,]
observation6
# Zad 2
probs.logistic <- predict(fit.logistic, observation6, type = "response")
# Zad 1
y2005index = Year == 2005
Smarket.y2005 = Smarket[y2005index,]
observation6 = Smarket.y2005[6,]
observation6
# Zad 2
probs.logistic <- predict(fit.logistic, observation6, type = "response")
probs.logistic
# Zad 1
y2005index = Year == 2005
Smarket.y2005 = Smarket[y2005index,]
observation6 = Smarket.y2005[6,]
probs.logistic <- predict(fit.logistic, observation6, type = "response")
1 - probs.logistic
fit.lda <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
pred.lda <- predict(fit.lda, observation6)
pred.lda$posterior[1]
# Zad 1
fit.logistic <- glm(Direction ~ Lag1 + Lag2, family = binomial, data = Smarket, subset = train)
probs.logistic <- predict(fit.logistic, observation6, type = "response")
1 - probs.logistic
# Zad 2
fit.lda <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
pred.lda <- predict(fit.lda, observation6)
pred.lda$posterior[1]
# Zad 3
fit.qda <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
pred.qda <- predict(fit.qda, observation6)
pred.qda$posterior[1]
View(Smarket.test)
# Zad 4
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2")]
Direction.train <- Direction[train]
pred.knn.1 <- knn(train.set, test.set, Direction.train, k = 1)
table(pred.knn.1, Direction.test)
mean(pred.knn.1 != Direction.test)
# Zad 4
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2")]
Direction.train <- Direction[train]
pred.knn.1 <- knn(train.set, test.set, Direction.train, k = 69)
table(pred.knn.1, Direction.test)
mean(pred.knn.1 != Direction.test)
# Zad 4
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2")]
Direction.train <- Direction[train]
pred.knn.1 <- knn(train.set, test.set, Direction.train, k = 3)
table(pred.knn.1, Direction.test)
mean(pred.knn.1 != Direction.test)
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2"
)]
Direction.train <- Direction[train]
pred.knn.5 <- knn(train.set, test.set, Direction.train, k = 5)
attr = attributes(probs.knn.20)
1 - attr$prob
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2"
)]
Direction.train <- Direction[train]
pred.knn.5 <- knn(train.set, test.set, Direction.train, k = 5)
attr = attributes(probs.knn.5)
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2"
)]
Direction.train <- Direction[train]
pred.knn.5 <- knn(train.set, test.set, Direction.train, k = 5)
attr = attributes(probs.knn.5)
1 - attr$prob
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, k = 5)
attr = attributes(probs.knn.5)
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- Smarket[!train, c("Lag1", "Lag2"
)]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, prob = TRUE, k = 5)
attr = attributes(probs.knn.5)
1 - attr$prob
# KNN
# Ustalamy parametr prob=TRUE w funkcji knn() aby otrzymaæ prawdopodobieñstwa klasyfikacji dla wektorów wejœciowych.
# Podstawiamy observation jako zbiór testowy.
# Ustalamy wysokie k (np. 20) aby dok³adniej zaobserwowaæ jak zachowuje siê prawdopodobieñstwo klasyfikacji,
# w opozycji do np. k = 1 dla którego mielibyœmy tylko mo¿liwoœci 0/1.
# Analogicznie do regresji logistycznej odejmujemy wynik od jedynki, aby otrzymaæ prawdopodobieñstwo spadku.
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation[c("Lag1", "Lag2")]
Direction.train <- Direction[train]
probs.knn.20 <- knn(train.set, test.set, Direction.train, prob=TRUE, k = 20)
attr = attributes(probs.knn.20)
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[!train, c("Lag1", "Lag2"
)]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, prob = TRUE, k = 5)
attr = attributes(probs.knn.5)
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[!train, c("Lag1", "Lag2"
)]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, prob = TRUE, k = 20)
attr = attributes(probs.knn.5)
1 - attr$prob
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[c("Lag1", "Lag2")]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, prob = TRUE, k = 20)
attr = attributes(probs.knn.5)
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[c("Lag1", "Lag2")]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, k = 20, prob = TRUE)
attr = attributes(probs.knn.5)
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[c("Lag1", "Lag2")]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, k = 5, prob = TRUE)
attr = attributes(probs.knn.5)
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[c("Lag1", "Lag2")]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, k = 5, prob = TRUE)
attr = attributes(probs.knn.5)
attr
attr$prob
1 - attr$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[c("Lag1", "Lag2")]
Direction.train <- Direction[train]
probs.knn.5 <- knn(train.set, test.set, Direction.train, k = 5, prob = TRUE)
1 - attributes(probs.knn.5)$prob
# Zad 4
#
train.set <- Smarket[train, c("Lag1", "Lag2")]
test.set <- observation6[c("Lag1", "Lag2")]
Direction.train <- Direction[train]
probs.knn.10 <- knn(train.set, test.set, Direction.train, k = 10, prob = TRUE)
1 - attributes(probs.knn.10)$prob
# 0.4
library(ISLR)
library(MASS)
library(class)
attach(Smarket)
# Setup danych
train <- Year < 2005
Smarket.test <- Smarket[!train,]
Direction.test <- Direction[!train]
y2005index = Year == 2005
Smarket.y2005 = Smarket[y2005index,]
observation6 = Smarket.y2005[6,]
# Zad 1
# Wykorzystując przykład z konspektu podmieniam dane w predict na obserwacje szóstą
fit.logistic <- glm(Direction ~ Lag1 + Lag2, family = binomial, data = Smarket, subset = train)
probs.logistic <- predict(fit.logistic, observation6, type = "response")
1 - probs.logistic # probs.logistic odpowiada wzrostowi, więc musimy odwrócić wartość by otrzymać spadek
# 0.4938612
# Zad 2
# Ponownie używając konspektu zmieniam dane, tym razem nie trzeba odwracać wyniku, posterior[1] zawiera szukany spadek
fit.lda <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
pred.lda <- predict(fit.lda, observation6)
pred.lda$posterior[1]
# 0.4938562
# Zad 3
fit.qda <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
pred.qda <- predict(fit.qda, observation6)
pred.qda$posterior[1]
# 0.4913561
# Zad 4
# W porównaniu do przykładu z konspektu musimy dodać parametr prob = TRUE, aby uzyskać prawdopodobień
